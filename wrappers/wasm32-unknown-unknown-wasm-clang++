#!/usr/bin/env python
## TODO(cjd) clang and clang++ are identical
import os
import sys
fullFileName = os.path.realpath(__file__)
path = os.path.realpath(os.path.dirname(fullFileName) + '/../../') + '/'
fileName = fullFileName[fullFileName.rfind('/')+1:]
args = sys.argv[1:]
args.insert(0, fileName)
LDFLAGS = []
if 'WASM_CFLAGS' in os.environ: args.extend(os.environ['WASM_CFLAGS'].split(' '))
if 'WASM_LDFLAGS' in os.environ: LDFLAGS.extend(os.environ['WASM_LDFLAGS'].split(' '))
DEBUG = 1 if 'WASM_DEBUG' in os.environ else 0

notLinking = False
isCpp = False
noCppInclude = False
nonFlagArgs = False
for i in range(0,len(args)):
    if args[i] in ['-c', '-S', '-E', '-M', '-MM']: notLinking = True
    if args[i] in ['-nostdinc', 'nostdinc++']: noCppInclude = True
    if args[i] == '-x' and i+1 < len(args):
        if args[i+1].index('c++') == 0: isCpp = True
        if args[i+1].endswith('-header'): notLinking = True
    if not args[i].startswith('-'): nonFlagArgs = True

TOOL = "build/clang/bin/" + fileName.split('-')[-1]
POSTARGS = [
    '-target', 'wasm32-unknown-unknown-wasm',
    '-mthread-model', 'single',
    '-B' + path + 'build/bin/',
]
LDFLAGS.extend([
    '-Wl,--allow-undefined-file=' + path + 'wasm.syms'
])
if isCpp: POSTARGS.extend(['-nostdlib++'])
if '-nostdlib' not in args and '-nostdlib' not in LDFLAGS:
    POSTARGS.extend([
        '--sysroot', path + 'build/musl',
        '-idirafter', path + 'build/musl/include',
    ])
if '-nodefaultlibs' not in args and '-nodefaultlibs' not in LDFLAGS:
    LDFLAGS.extend([
        '-rtlib=compiler-rt',
        '-resource-dir', path + 'build/compiler-rt'
    ])

if not notLinking:
    POSTARGS.extend(LDFLAGS)
    if '-o' not in args: POSTARGS.extend(['-o', 'a.out.wasm'])

args.extend(POSTARGS)
if (DEBUG):
    print >> sys.stderr, ('notLinking = ' + str(notLinking) +
        ' isCpp = ' + str(isCpp) +
        ' noCppInclude = ' + str(noCppInclude) +
        ' nonFlagArgs = ' + str(nonFlagArgs))
    line = [path + TOOL]
    line.extend(args[1:])
    print >> sys.stderr, ' '.join(line)
os.execv(path + TOOL, args)
